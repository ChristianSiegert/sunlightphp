
INTRODUCTION
============

Hello there,

thanks for downloading SunlightPHP. I put many months of work into this small
and fast PHP framework. I created it specifically for my needs, it is not an
all-rounder and might not be suited for your purposes. Try it and find out.


REQUIREMENTS
============
	
	* Apache 2
		$ sudo apt-get install apache2
		
		* Add directive "AllowEncodedSlashes On" to Apache server configuration
		or VirtualHost configuration file.

	* PHP 5.3
		* curl module
			$ sudo apt-get install php5-curl
		* intl module
			$ sudo apt-get install php5-intl
	
	* CouchDB 0.10
		$ sudo apt-get install couchdb
		
	* PHPUnit
		$ sudo apt-get install phpunit
		

INSTALLATION STEP 1
===================

After copying SunlightPHP to the location of your choice, make sure your server
is set up correctly. You can do this by browsing to

	http://example.com/sunlightphp/maintenance/maintenance.php
	
Replace "example.com" with your server's address.
	

INSTALLATION STEP 2
===================

Open the file app/config/core.php and adjust the settings to suit your needs.


	(OPTIONAL) ASSET COMPRESSION
	----------------------------
	
	If you enable JS and/or CSS compression, you need to download the
	YUICompressor from http://developer.yahoo.com/yui/compressor/ and place it
	in app/vendors/yuicompressor/yuicompressor-2.4.2.jar
	
	You will also need Java.
		$ sudo apt-get install default-jre
	

	(OPTIONAL) CACHING WITH APC
	---------------------------
	
	If you enable caching with APC, you need to have APC installed as a PHP
	module.
	
	$ sudo apt-get install php-apc
	
	
	(OPTIONAL) CACHING WITH MEMCACHED
	---------------------------------
	
	If you enable caching with Memcached, you need to have memcached and the
	memcache module for PHP installed.

	$ sudo apt-get install memcached php5-memcache


TIPS
====
	
	TUNING APACHE
	-------------
	
	In the default configuration, Apache tries to appeal to everyone. This means
	lax settings and performance penalties.
	
	1.	Apache looks in each directory for an .htaccess file. Disable this
		behavior by editing your VirtualHost configuration file and change
		"AllowOverride All" to "AllowOverride None".
		
		Make sure to copy your rules from your .htaccess files into the
		VirtualHost configuration file. You need to reload Apache afterwards.
	
	2.	High traffic websites are choked to death by Apache's default handling
		of connections. Remove this bottleneck by setting the KeepAliveTimeout
		to "KeepAliveTimeout 2".
		
		This setting is usually found in /etc/apache2/apache2.conf .
		
	3.	Give attackers as little information as possible about your system. Turn
		off Apache's detailed response about its version and installed modules
		by changing "ServerTokens Full" to "ServerTokens Prod".
		
		This setting is usually found in /etc/apache2/conf.d/security.conf .


	TUNING APC
	----------
	
	Not configured correctly, APC will slow your server down horribly. For a
	huge big performance boost, change the APC settings to this:
	
		# Size of the cache in MB
		apc.shm_size=250
		
		# Disable checking for updated script files
		apc.stat=0
		
		# If cache is full, try to remove only entries older than this
		apc.ttl=7200
		apc.user_ttl=7200
		
	The APC configuration file is located at /etc/php5/conf.d/apc.ini .
	

	REMOTELY ACCESSING COUCHDB
	--------------------------

	If you want to access CouchDB on a remote server, e.g. for administration
	with the pretty front-end Futon, you can make it accessible with:

		$ ssh -L {1}:localhost:{2} {3}@{4}
	
		{1}	The port on your localhost you want to bind the CouchDB from the
			remote server to.
		{2}	The port CouchDB occupies on your remote server. CouchDB listens by
			default to port 5984.
		{3} Your username for the remote server.
		{4} The IP address of your remote server.
		
	With all the placeholders replaced, it can look something like this:
		$ ssh -L 5985:localhost:5984 root@109.74.204.144

	Congratulations, you can now access your remote server's CouchDB simply by
	browsing to http://localhost:5985/ .
	
	
	REMOTELY ACCESSING SUNLIGHTPHP'S MAINTENANCE PANEL
	--------------------------------------------------
	
	If you want to access SunlightPHP's maintenance panel on a remote server,
	follow these steps:
			
	1.	Add "127.0.0.1 {name}" to the /etc/hosts file on your localhost. Replace
		{name} with a unique name you made up, e.g. an abbreviation of your
		domain name, so you can remember it well.
		
		For projects hosted on christian-siegert.com I use "cs" as name, i.e. my
		localhost /etc/hosts file contains "127.0.0.1 cs".
		
	2.	Add the name as a server alias in your remote server's VirtualHost
		configuration file. This file is usually located at /etc/apache2/sites-
		available. Look for a line starting with "ServerAlias" and append the
		name there.
				
		Continuing with the example from above, I edited /etc/apache2/sites-
		available/christian-siegert.com and updated the list of server aliases
		to "ServerAlias www.christian-siegert.com cs".
		
	3.	You can now access the SunlightPHP maintenance panel on your remote
		server from your localhost with something like:
			$ ssh -L 8080:christian-siegert.com:80 root@109.74.204.144
			
		Browse to http://cs:8080/sunlightphp/maintenance/maintenance.php on your
		localhost to see it.